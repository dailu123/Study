目录
环境准备
后端：Spring Boot 项目搭建
2.1 创建 Spring Boot 项目
2.2 配置数据库
2.3 创建实体类和仓库接口
2.4 创建服务层
2.5 创建控制器
2.6 实现实时数据推送（WebSocket）
2.7 后端项目运行测试
前端：Vue.js 项目搭建
3.1 安装 Node.js 和 npm
3.2 使用 Vue CLI 创建项目
3.3 安装前端依赖
3.4 创建 Vue 组件和页面
3.5 配置前端与后端的通信
3.6 实现实时数据接收（WebSocket）
3.7 前端项目运行测试
项目集成与部署
4.1 前后端集成
4.2 构建前端项目并部署到 Spring Boot
4.3 部署到服务器
功能扩展与优化
5.1 事件流可视化
5.2 延迟追踪与失败率统计
5.3 大屏展示
5.4 性能优化
总结与参考资料
1. 环境准备
在开始之前，请确保您具备以下开发环境：

Java Development Kit (JDK) 8 或以上：用于运行和开发 Spring Boot 应用。
Maven：用于项目构建和依赖管理。
Node.js 和 npm：用于前端开发和包管理。
数据库：如 MySQL 或 PostgreSQL，用于存储事件流数据。
IDE：
后端：IntelliJ IDEA 或 Eclipse。
前端：Visual Studio Code。
2. 后端：Spring Boot 项目搭建
2.1 创建 Spring Boot 项目
使用 Spring Initializr 创建项目：

打开浏览器，访问 Spring Initializr。
配置项目：
Project: Maven Project
Language: Java
Spring Boot: 选择最新稳定版本（如 2.7.x 或 3.x）
Project Metadata:
Group: com.example
Artifact: admin-dashboard
Name: admin-dashboard
Description: 后台管理平台
Package name: com.example.admindashboard
Packaging: Jar
Java: 8 或以上
Dependencies: 添加以下依赖
Spring Web：构建 RESTful API
Spring Data JPA：数据库交互
MySQL Driver（或其他数据库驱动，如 PostgreSQL）
Spring Boot DevTools：开发时自动重启
Lombok：减少样板代码
Spring Security（可选）：用户认证与授权
WebSocket：实现实时数据推送
点击 Generate 按钮下载项目压缩包。
导入项目到 IDE：

解压下载的项目压缩包。
使用 IntelliJ IDEA 或其他 IDE 打开该项目。
等待 Maven 依赖下载完成。
2.2 配置数据库
安装并配置数据库：

安装 MySQL：

下载并安装 MySQL。
创建一个新的数据库，如 admin_dashboard。
创建一个数据库用户，并赋予该用户对 admin_dashboard 数据库的所有权限。
配置 application.properties：

在 src/main/resources 目录下找到 application.properties 文件，并添加以下配置：

properties
复制代码
# 数据库配置
spring.datasource.url=jdbc:mysql://localhost:3306/admin_dashboard?useSSL=false&serverTimezone=UTC
spring.datasource.username=your_db_username
spring.datasource.password=your_db_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA 配置
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
注意：将 your_db_username 和 your_db_password 替换为实际的数据库用户名和密码。

2.3 创建实体类和仓库接口
创建实体类 EventFlow：

在 src/main/java/com/example/admindashboard/model 目录下创建 EventFlow.java 文件：

java
复制代码
package com.example.admindashboard.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "event_flows")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class EventFlow {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "esc_flow_no", nullable = false, unique = true)
    private String escFlowNo;

    @Column(name = "service_id", nullable = false)
    private String serviceId;

    @Column(name = "business_resp_code", nullable = false)
    private String businessRespCode;

    @Column(name = "tran_stamp", nullable = false)
    private LocalDateTime tranStamp;

    // 可以根据需要添加父子关系
    @Column(name = "parent_esc_flow_no")
    private String parentEscFlowNo;
}
创建仓库接口 EventFlowRepository：

在 src/main/java/com/example/admindashboard/repository 目录下创建 EventFlowRepository.java 文件：

java
复制代码
package com.example.admindashboard.repository;

import com.example.admindashboard.model.EventFlow;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface EventFlowRepository extends JpaRepository<EventFlow, Long> {
    List<EventFlow> findByParentEscFlowNo(String parentEscFlowNo);
    EventFlow findByEscFlowNo(String escFlowNo);
}
2.4 创建服务层
创建服务接口 EventFlowService：

在 src/main/java/com/example/admindashboard/service 目录下创建 EventFlowService.java 文件：

java
复制代码
package com.example.admindashboard.service;

import com.example.admindashboard.model.EventFlow;

import java.util.List;

public interface EventFlowService {
    List<EventFlow> getChildFlows(String parentEscFlowNo);
    EventFlow getFlowByEscFlowNo(String escFlowNo);
    EventFlow createEventFlow(EventFlow eventFlow);
}
创建服务实现类 EventFlowServiceImpl：

在 src/main/java/com/example/admindashboard/service 目录下创建 EventFlowServiceImpl.java 文件：

java
复制代码
package com.example.admindashboard.service;

import com.example.admindashboard.model.EventFlow;
import com.example.admindashboard.repository.EventFlowRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EventFlowServiceImpl implements EventFlowService {

    @Autowired
    private EventFlowRepository eventFlowRepository;

    @Override
    public List<EventFlow> getChildFlows(String parentEscFlowNo) {
        return eventFlowRepository.findByParentEscFlowNo(parentEscFlowNo);
    }

    @Override
    public EventFlow getFlowByEscFlowNo(String escFlowNo) {
        return eventFlowRepository.findByEscFlowNo(escFlowNo);
    }

    @Override
    public EventFlow createEventFlow(EventFlow eventFlow) {
        return eventFlowRepository.save(eventFlow);
    }
}
2.5 创建控制器
创建控制器 EventFlowController：

在 src/main/java/com/example/admindashboard/controller 目录下创建 EventFlowController.java 文件：

java
复制代码
package com.example.admindashboard.controller;

import com.example.admindashboard.model.EventFlow;
import com.example.admindashboard.service.EventFlowService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/event-flows")
@CrossOrigin(origins = "http://localhost:8081") // 前端地址
public class EventFlowController {

    @Autowired
    private EventFlowService eventFlowService;

    // 获取指定父节点的子节点
    @GetMapping("/children/{parentEscFlowNo}")
    public List<EventFlow> getChildFlows(@PathVariable String parentEscFlowNo) {
        return eventFlowService.getChildFlows(parentEscFlowNo);
    }

    // 获取指定 ESCFLOWNO 的节点
    @GetMapping("/{escFlowNo}")
    public EventFlow getFlowByEscFlowNo(@PathVariable String escFlowNo) {
        return eventFlowService.getFlowByEscFlowNo(escFlowNo);
    }

    // 创建新的事件流节点
    @PostMapping("/")
    public EventFlow createEventFlow(@RequestBody EventFlow eventFlow) {
        return eventFlowService.createEventFlow(eventFlow);
    }
}
注意：@CrossOrigin 注解用于解决前后端跨域问题，根据您的前端地址进行配置。

2.6 实现实时数据推送（WebSocket）
为了实现实时事件数据的推送，我们将使用 WebSocket。这里使用 Spring Boot 的 WebSocket 支持。

添加 WebSocket 依赖：

在 pom.xml 中添加以下依赖（如果之前未添加）：

xml
复制代码
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-websocket</artifactId>
</dependency>
配置 WebSocket：

在 src/main/java/com/example/admindashboard/config 目录下创建 WebSocketConfig.java 文件：

java
复制代码
package com.example.admindashboard.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic");
        config.setApplicationDestinationPrefixes("/app");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws").setAllowedOrigins("*").withSockJS();
    }
}
创建 WebSocket 事件推送服务：

在 src/main/java/com/example/admindashboard/service 目录下创建 WebSocketService.java 文件：

java
复制代码
package com.example.admindashboard.service;

import com.example.admindashboard.model.EventFlow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

@Service
public class WebSocketService {

    @Autowired
    private SimpMessagingTemplate messagingTemplate;

    public void sendEventFlow(EventFlow eventFlow) {
        messagingTemplate.convertAndSend("/topic/eventFlows", eventFlow);
    }
}
修改控制器以推送实时数据：

在 EventFlowController 中注入 WebSocketService 并在创建事件流时推送数据：

java
复制代码
@Autowired
private WebSocketService webSocketService;

@PostMapping("/")
public EventFlow createEventFlow(@RequestBody EventFlow eventFlow) {
    EventFlow savedFlow = eventFlowService.createEventFlow(eventFlow);
    webSocketService.sendEventFlow(savedFlow); // 推送实时数据
    return savedFlow;
}
2.7 后端项目运行测试
运行 Spring Boot 应用：

在 IDE 中运行 AdminDashboardApplication 类（自动生成的主类）。
确保应用启动成功，没有错误。
测试 API：

使用 Postman 或 浏览器 测试 API。
例如，访问 http://localhost:8080/api/event-flows/67c8766648-qkfmp-20241225000251-002292，应返回对应的事件流数据。
测试 WebSocket：

使用 WebSocket 客户端（如 WebSocket King）连接 ws://localhost:8080/ws。
订阅 /topic/eventFlows 频道。
通过 API 创建新的事件流节点，观察是否在 WebSocket 客户端接收到推送的数据。
3. 前端：Vue.js 项目搭建
3.1 安装 Node.js 和 npm
下载并安装 Node.js：

访问 Node.js 官方网站。
下载并安装适合您操作系统的版本（推荐 LTS 版本）。
验证安装：

在终端或命令提示符中运行以下命令，确保 Node.js 和 npm 安装成功：

bash
复制代码
node -v
npm -v
3.2 使用 Vue CLI 创建项目
安装 Vue CLI：

在终端中运行以下命令全局安装 Vue CLI：

bash
复制代码
npm install -g @vue/cli
创建 Vue 项目：

在终端中导航到您希望创建项目的目录，运行以下命令：

bash
复制代码
vue create admin-dashboard-frontend
选择默认配置：对于初学者，选择默认配置即可。或者选择手动选择特性，添加 Babel, Router, Vuex, CSS Pre-processors, Linter / Formatter 等。
进入项目目录：

bash
复制代码
cd admin-dashboard-frontend
3.3 安装前端依赖
安装 Element UI（用于 UI 组件）：

bash
复制代码
npm install element-ui --save
安装 Axios（用于 HTTP 请求）：

bash
复制代码
npm install axios --save
安装 SockJS 和 Stomp.js（用于 WebSocket 连接）：

bash
复制代码
npm install sockjs-client stompjs --save
安装 ECharts（用于数据可视化）：

bash
复制代码
npm install echarts --save
3.4 创建 Vue 组件和页面
引入 Element UI：

在 src/main.js 中引入 Element UI 并进行配置：

javascript
复制代码
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'
import ElementUI from 'element-ui'
import 'element-ui/lib/theme-chalk/index.css'

Vue.config.productionTip = false

Vue.use(ElementUI)

new Vue({
  router,
  store,
  render: h => h(App)
}).$mount('#app')
配置路由：

在 src/router/index.js 中配置路由，例如创建一个 Home 页面和 Flow 页面：

javascript
复制代码
import Vue from 'vue'
import Router from 'vue-router'
import Home from '@/views/Home.vue'
import Flow from '@/views/Flow.vue'

Vue.use(Router)

export default new Router({
  mode: 'history',
  routes: [
    {
      path: '/',
      name: 'Home',
      component: Home
    },
    {
      path: '/flow',
      name: 'Flow',
      component: Flow
    }
  ]
})
创建 Flow 页面：

在 src/views 目录下创建 Flow.vue 文件：

vue
复制代码
<template>
  <div>
    <el-input v-model="escFlowNo" placeholder="输入 Root ESCFLOWNO" style="width: 300px; margin-bottom: 20px;"></el-input>
    <el-button type="primary" @click="fetchFlow">查询</el-button>
    <div v-if="loading" style="margin-top: 20px;">加载中...</div>
    <div v-else>
      <flow-node :node="flowData"></flow-node>
    </div>
  </div>
</template>

<script>
import axios from 'axios'
import SockJS from 'sockjs-client'
import Stomp from 'stompjs'

export default {
  data() {
    return {
      escFlowNo: '',
      flowData: null,
      loading: false,
      stompClient: null
    }
  },
  methods: {
    async fetchFlow() {
      if (!this.escFlowNo) {
        this.$message.error('请输入 Root ESCFLOWNO')
        return
      }
      this.loading = true
      try {
        const response = await axios.get(`http://localhost:8080/api/event-flows/${this.escFlowNo}`)
        this.flowData = response.data
        this.loading = false
      } catch (error) {
        console.error(error)
        this.$message.error('查询失败')
        this.loading = false
      }
    },
    connectWebSocket() {
      const socket = new SockJS('http://localhost:8080/ws')
      this.stompClient = Stomp.over(socket)
      const _this = this
      this.stompClient.connect({}, function (frame) {
        console.log('Connected: ' + frame)
        _this.stompClient.subscribe('/topic/eventFlows', function (message) {
          const newFlow = JSON.parse(message.body)
          _this.$message.info('收到新的事件流数据')
          // 根据需要更新 flowData
          if (newFlow.parentEscFlowNo === _this.flowData.escFlowNo) {
            if (!_this.flowData.children) {
              _this.flowData.children = []
            }
            _this.flowData.children.push(newFlow)
          }
        })
      })
    }
  },
  mounted() {
    this.connectWebSocket()
  }
}
</script>

<style scoped>
/* 自定义样式 */
</style>
创建递归组件 FlowNode：

在 src/components 目录下创建 FlowNode.vue 文件：

vue
复制代码
<template>
  <div style="margin-left: 20px; border-left: 1px solid #ccc; padding-left: 10px;">
    <el-row>
      <el-col :span="4">
        <span :style="{ color: node.businessRespCode === '000000' ? 'green' : 'red' }">
          {{ node.serviceId }}
        </span>
      </el-col>
      <el-col :span="4">
        <span>{{ node.businessRespCode }}</span>
      </el-col>
      <el-col :span="8">
        <span>{{ node.tranStamp }}</span>
      </el-col>
    </el-row>
    <div v-if="node.children && node.children.length">
      <flow-node v-for="child in node.children" :key="child.escFlowNo" :node="child"></flow-node>
    </div>
  </div>
</template>

<script>
export default {
  name: 'FlowNode',
  props: {
    node: {
      type: Object,
      required: true
    }
  }
}
</script>

<style scoped>
/* 自定义样式 */
</style>
3.5 配置前端与后端的通信
配置代理以解决跨域问题：

在 vue.config.js 文件中（如果不存在，请在项目根目录创建），添加代理配置：

javascript
复制代码
module.exports = {
  devServer: {
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true
      },
      '/ws': {
        target: 'http://localhost:8080',
        ws: true,
        changeOrigin: true
      }
    }
  }
}
注意：确保前端请求 /api 和 /ws 的时候，能通过代理转发到后端。

3.6 实现实时数据接收（WebSocket）
在之前的 Flow.vue 中，我们已经配置了 WebSocket 的连接和订阅。当后端推送新的事件流数据时，前端会接收到并更新 flowData。

3.7 前端项目运行测试
运行前端项目：

在终端中导航到前端项目目录，运行以下命令启动开发服务器：

bash
复制代码
npm run serve
访问前端应用：

打开浏览器，访问 http://localhost:8081（默认端口可能为 8080，如果与后端冲突，可在终端中查看实际运行端口）。

测试功能：

在输入框中输入一个存在的 escFlowNo，点击查询按钮。
查看是否能正确显示事件流数据。
使用 Postman 或其他工具向后端发送新的事件流数据，观察前端是否能实时接收并显示。
4. 项目集成与部署
4.1 前后端集成
为了让前端和后端能够无缝集成，可以将前端构建后的静态文件部署到 Spring Boot 中。

构建前端项目：

在前端项目目录中，运行以下命令进行生产环境构建：

bash
复制代码
npm run build
这将生成一个 dist 目录，包含打包后的静态文件。

将构建后的文件复制到 Spring Boot 项目：

将 dist 目录下的所有文件复制到 Spring Boot 项目中的 src/main/resources/static 目录下。
确保 static 目录存在，如果不存在，手动创建。
修改 Spring Boot 控制器以支持前端路由：

为了让 Spring Boot 在访问前端路由时返回 index.html，在后端项目中创建一个控制器：

在 src/main/java/com/example/admindashboard/controller 目录下创建 WebController.java 文件：

java
复制代码
package com.example.admindashboard.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class WebController {

    @GetMapping("/{path:^(?!api|ws).*}")
    public String forward() {
        return "forward:/";
    }
}
这个控制器会将所有非 API 和 WebSocket 的请求转发到 index.html，从而支持前端路由。

重新构建并运行 Spring Boot 应用：

在 IDE 中重新运行 Spring Boot 应用，或者使用以下命令：
bash
复制代码
mvn clean package
java -jar target/admin-dashboard-0.0.1-SNAPSHOT.jar
访问整合后的应用：

打开浏览器，访问 http://localhost:8080，应能看到前端应用。

4.2 构建前端项目并部署到 Spring Boot
已经在上一步中完成。

4.3 部署到服务器
选择服务器：

可以选择 云服务器（如 AWS、阿里云、腾讯云）或 本地服务器。
安装 Java 和数据库：

在服务器上安装 JDK、Maven、MySQL 等必需的软件。
部署 Spring Boot 应用：

将构建好的 Spring Boot 可执行 Jar 文件上传到服务器。
在服务器上运行：
bash
复制代码
nohup java -jar admin-dashboard-0.0.1-SNAPSHOT.jar &
使用工具如 screen 或 tmux 保持应用运行，或使用 systemd 服务进行管理。
配置域名和 HTTPS（可选）：

绑定域名到服务器 IP。
使用 Let's Encrypt 或其他证书机构配置 HTTPS。
5. 功能扩展与优化
5.1 事件流可视化
为了实现更复杂和美观的事件流可视化，可以使用 ECharts 或 D3.js。

安装 ECharts：

已在前端依赖中安装。

创建可视化组件：

在 src/components 目录下创建 FlowChart.vue 文件：

vue
复制代码
<template>
  <div ref="chart" style="width: 100%; height: 600px;"></div>
</template>

<script>
import echarts from 'echarts'

export default {
  name: 'FlowChart',
  props: {
    flowData: {
      type: Object,
      required: true
    }
  },
  mounted() {
    this.initChart()
  },
  watch: {
    flowData: {
      handler() {
        this.updateChart()
      },
      deep: true
    }
  },
  methods: {
    initChart() {
      this.chart = echarts.init(this.$refs.chart)
      const option = this.getOption(this.flowData)
      this.chart.setOption(option)
    },
    updateChart() {
      if (this.chart && this.flowData) {
        const option = this.getOption(this.flowData)
        this.chart.setOption(option, true)
      }
    },
    getOption(data) {
      // 简单的层次结构展示
      return {
        tooltip: {
          trigger: 'item',
          triggerOn: 'mousemove'
        },
        series: [
          {
            type: 'tree',
            data: [this.formatTreeData(data)],
            top: '1%',
            left: '7%',
            bottom: '1%',
            right: '20%',
            symbolSize: 7,
            label: {
              position: 'left',
              verticalAlign: 'middle',
              align: 'right',
              fontSize: 9
            },
            leaves: {
              label: {
                position: 'right',
                verticalAlign: 'middle',
                align: 'left'
              }
            },
            emphasis: {
              focus: 'descendant'
            },
            expandAndCollapse: true,
            animationDuration: 550,
            animationDurationUpdate: 750
          }
        ]
      }
    },
    formatTreeData(node) {
      return {
        name: `${node.serviceId} (${node.businessRespCode})`,
        value: node.id,
        children: node.children ? node.children.map(child => this.formatTreeData(child)) : []
      }
    }
  }
}
</script>

<style scoped>
/* 自定义样式 */
</style>
在 Flow.vue 中使用 FlowChart 组件：

修改 Flow.vue 文件，导入并使用 FlowChart：

vue
复制代码
<template>
  <div>
    <el-input v-model="escFlowNo" placeholder="输入 Root ESCFLOWNO" style="width: 300px; margin-bottom: 20px;"></el-input>
    <el-button type="primary" @click="fetchFlow">查询</el-button>
    <div v-if="loading" style="margin-top: 20px;">加载中...</div>
    <div v-else>
      <flow-chart v-if="flowData" :flowData="flowData"></flow-chart>
    </div>
  </div>
</template>

<script>
import axios from 'axios'
import SockJS from 'sockjs-client'
import Stomp from 'stompjs'
import FlowChart from '@/components/FlowChart.vue'

export default {
  components: {
    FlowChart
  },
  data() {
    return {
      escFlowNo: '',
      flowData: null,
      loading: false,
      stompClient: null
    }
  },
  methods: {
    async fetchFlow() {
      if (!this.escFlowNo) {
        this.$message.error('请输入 Root ESCFLOWNO')
        return
      }
      this.loading = true
      try {
        const response = await axios.get(`/api/event-flows/${this.escFlowNo}`)
        this.flowData = response.data
        this.loading = false
      } catch (error) {
        console.error(error)
        this.$message.error('查询失败')
        this.loading = false
      }
    },
    connectWebSocket() {
      const socket = new SockJS('/ws')
      this.stompClient = Stomp.over(socket)
      const _this = this
      this.stompClient.connect({}, function (frame) {
        console.log('Connected: ' + frame)
        _this.stompClient.subscribe('/topic/eventFlows', function (message) {
          const newFlow = JSON.parse(message.body)
          _this.$message.info('收到新的事件流数据')
          // 根据需要更新 flowData
          if (newFlow.parentEscFlowNo === _this.flowData.escFlowNo) {
            if (!_this.flowData.children) {
              _this.flowData.children = []
            }
            _this.flowData.children.push(newFlow)
            _this.$refs.flowChart.updateChart()
          }
        })
      })
    }
  },
  mounted() {
    this.connectWebSocket()
  }
}
</script>

<style scoped>
/* 自定义样式 */
</style>
5. 功能扩展与优化
5.1 事件流可视化
在前端使用 ECharts 的树图来展示事件流层级结构。前面的 FlowChart.vue 组件已经实现了基础的可视化。可以根据需求进一步优化图表样式和交互。

5.2 延迟追踪与失败率统计
后端实现延迟追踪：

在 EventFlow 实体中，已经有 tranStamp 字段，可以用来计算事件的延迟。
可以创建一个新的 API 来统计某个时间段内的事件数量、成功率、失败率等。
创建统计 API：

在 EventFlowController 中添加：

java
复制代码
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

// 获取统计数据
@GetMapping("/statistics")
public Statistics getStatistics(
        @RequestParam(required = false) String startTime,
        @RequestParam(required = false) String endTime
) {
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    LocalDateTime start = (startTime != null) ? LocalDateTime.parse(startTime, formatter) : LocalDateTime.now().minusDays(1);
    LocalDateTime end = (endTime != null) ? LocalDateTime.parse(endTime, formatter) : LocalDateTime.now();

    List<EventFlow> events = eventFlowRepository.findAll(); // 根据实际情况优化查询

    long total = events.size();
    long success = events.stream().filter(e -> "000000".equals(e.getBusinessRespCode())).count();
    long failure = total - success;

    double failureRate = (double) failure / total * 100;

    // 计算平均延迟
    double avgDelay = events.stream()
            .mapToLong(e -> e.getTranStamp().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli())
            .average()
            .orElse(0.0);

    Statistics stats = new Statistics();
    stats.setTotalEvents(total);
    stats.setSuccessEvents(success);
    stats.setFailureEvents(failure);
    stats.setFailureRate(failureRate);
    stats.setAverageDelay(avgDelay);

    return stats;
}

// 定义统计数据类
public static class Statistics {
    private long totalEvents;
    private long successEvents;
    private long failureEvents;
    private double failureRate;
    private double averageDelay;

    // getters and setters
}
注意：上面的统计查询仅为示例，实际应用中应优化查询性能，避免加载所有数据。

前端展示统计数据：

在前端 Flow.vue 中添加统计展示部分：

vue
复制代码
<template>
  <div>
    <el-input v-model="escFlowNo" placeholder="输入 Root ESCFLOWNO" style="width: 300px; margin-bottom: 20px;"></el-input>
    <el-button type="primary" @click="fetchFlow">查询</el-button>
    <el-button type="success" @click="fetchStatistics" style="margin-left: 10px;">获取统计</el-button>
    
    <div v-if="loading" style="margin-top: 20px;">加载中...</div>
    
    <div v-else>
      <flow-chart v-if="flowData" :flowData="flowData"></flow-chart>
      <div v-if="statistics" style="margin-top: 40px;">
        <el-card>
          <h3>统计信息</h3>
          <el-row>
            <el-col :span="8">
              <el-statistic title="总事件数" :value="statistics.totalEvents"></el-statistic>
            </el-col>
            <el-col :span="8">
              <el-statistic title="成功事件数" :value="statistics.successEvents"></el-statistic>
            </el-col>
            <el-col :span="8">
              <el-statistic title="失败事件数" :value="statistics.failureEvents"></el-statistic>
            </el-col>
          </el-row>
          <el-row style="margin-top: 20px;">
            <el-col :span="8">
              <el-statistic title="失败率 (%)" :value="statistics.failureRate"></el-statistic>
            </el-col>
            <el-col :span="8">
              <el-statistic title="平均延迟 (ms)" :value="statistics.averageDelay"></el-statistic>
            </el-col>
          </el-row>
        </el-card>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios'
import SockJS from 'sockjs-client'
import Stomp from 'stompjs'
import FlowChart from '@/components/FlowChart.vue'

export default {
  components: {
    FlowChart
  },
  data() {
    return {
      escFlowNo: '',
      flowData: null,
      statistics: null,
      loading: false,
      stompClient: null
    }
  },
  methods: {
    async fetchFlow() {
      if (!this.escFlowNo) {
        this.$message.error('请输入 Root ESCFLOWNO')
        return
      }
      this.loading = true
      try {
        const response = await axios.get(`/api/event-flows/${this.escFlowNo}`)
        this.flowData = response.data
        this.loading = false
      } catch (error) {
        console.error(error)
        this.$message.error('查询失败')
        this.loading = false
      }
    },
    async fetchStatistics() {
      this.loading = true
      try {
        const response = await axios.get('/api/event-flows/statistics')
        this.statistics = response.data
        this.loading = false
      } catch (error) {
        console.error(error)
        this.$message.error('获取统计失败')
        this.loading = false
      }
    },
    connectWebSocket() {
      const socket = new SockJS('/ws')
      this.stompClient = Stomp.over(socket)
      const _this = this
      this.stompClient.connect({}, function (frame) {
        console.log('Connected: ' + frame)
        _this.stompClient.subscribe('/topic/eventFlows', function (message) {
          const newFlow = JSON.parse(message.body)
          _this.$message.info('收到新的事件流数据')
          // 根据需要更新 flowData
          if (newFlow.parentEscFlowNo === _this.flowData.escFlowNo) {
            if (!_this.flowData.children) {
              _this.flowData.children = []
            }
            _this.flowData.children.push(newFlow)
            _this.$refs.flowChart.updateChart()
          }
        })
      })
    }
  },
  mounted() {
    this.connectWebSocket()
  }
}
</script>

<style scoped>
/* 自定义样式 */
</style>
5.3 大屏展示
为了实现大屏展示，可以创建一个专门的大屏页面，使用全屏组件和布局，展示关键统计数据和实时事件流。

创建大屏页面：

在 src/views 目录下创建 Dashboard.vue 文件：

vue
复制代码
<template>
  <div>
    <el-row :gutter="20">
      <el-col :span="8">
        <el-card>
          <h3>总事件数</h3>
          <el-statistic :value="statistics.totalEvents"></el-statistic>
        </el-card>
      </el-col>
      <el-col :span="8">
        <el-card>
          <h3>成功事件数</h3>
          <el-statistic :value="statistics.successEvents"></el-statistic>
        </el-card>
      </el-col>
      <el-col :span="8">
        <el-card>
          <h3>失败事件数</h3>
          <el-statistic :value="statistics.failureEvents"></el-statistic>
        </el-card>
      </el-col>
    </el-row>
    <el-row :gutter="20" style="margin-top: 20px;">
      <el-col :span="12">
        <el-card>
          <h3>失败率 (%)</h3>
          <el-statistic :value="statistics.failureRate"></el-statistic>
        </el-card>
      </el-col>
      <el-col :span="12">
        <el-card>
          <h3>平均延迟 (ms)</h3>
          <el-statistic :value="statistics.averageDelay"></el-statistic>
        </el-card>
      </el-col>
    </el-row>
    <el-row style="margin-top: 40px;">
      <el-col :span="24">
        <flow-chart :flowData="flowData"></flow-chart>
      </el-col>
    </el-row>
  </div>
</template>

<script>
import axios from 'axios'
import FlowChart from '@/components/FlowChart.vue'

export default {
  components: {
    FlowChart
  },
  data() {
    return {
      flowData: null,
      statistics: null,
      loading: false
    }
  },
  methods: {
    async fetchStatistics() {
      this.loading = true
      try {
        const response = await axios.get('/api/event-flows/statistics')
        this.statistics = response.data
        this.loading = false
      } catch (error) {
        console.error(error)
        this.$message.error('获取统计失败')
        this.loading = false
      }
    },
    async fetchFlow() {
      // 假设大屏展示特定的 Root ESCFLOWNO
      const rootEscFlowNo = '67c8766648-qkfmp-20241225000251-002292'
      this.loading = true
      try {
        const response = await axios.get(`/api/event-flows/${rootEscFlowNo}`)
        this.flowData = response.data
        this.loading = false
      } catch (error) {
        console.error(error)
        this.$message.error('查询失败')
        this.loading = false
      }
    },
    async initialize() {
      await this.fetchFlow()
      await this.fetchStatistics()
    }
  },
  mounted() {
    this.initialize()
  }
}
</script>

<style scoped>
/* 自定义样式 */
</style>
在路由中添加大屏路由：

修改 src/router/index.js，添加 Dashboard 路由：

javascript
复制代码
import Vue from 'vue'
import Router from 'vue-router'
import Home from '@/views/Home.vue'
import Flow from '@/views/Flow.vue'
import Dashboard from '@/views/Dashboard.vue'

Vue.use(Router)

export default new Router({
  mode: 'history',
  routes: [
    {
      path: '/',
      name: 'Home',
      component: Home
    },
    {
      path: '/flow',
      name: 'Flow',
      component: Flow
    },
    {
      path: '/dashboard',
      name: 'Dashboard',
      component: Dashboard
    }
  ]
})
访问大屏页面：

在浏览器中访问 http://localhost:8080/dashboard，应能看到大屏展示的统计数据和事件流图。

5.4 性能优化
后端优化：

分页查询：对于大数据量，使用分页查询避免一次性加载过多数据。
索引优化：确保数据库表中的关键字段（如 escFlowNo, tranStamp）有索引，以加快查询速度。
缓存机制：使用 Spring Cache 或外部缓存（如 Redis）缓存频繁访问的数据，减少数据库压力。
前端优化：

懒加载组件：对于复杂的组件，使用懒加载技术减少初始加载时间。
代码分割：利用 Webpack 的代码分割功能，将前端代码拆分为多个包，提升加载效率。
虚拟滚动：在展示大量数据时，使用虚拟滚动技术，只渲染可视区域的数据，提升性能。
