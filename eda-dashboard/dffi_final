import os
from git import Repo
from datetime import datetime, timedelta
from difflib import unified_diff

def get_repo(repo_path="."):
    """
    Return a Repo object for the given path.
    Raise an exception if the path is not a valid Git repository.
    """
    if not os.path.exists(repo_path):
        raise FileNotFoundError(f"Path does not exist: {repo_path}")
    repo = Repo(repo_path)
    if repo.bare:
        raise Exception(f"The repository at '{repo_path}' is bare. Please provide a working directory.")
    return repo

def get_commits_in_time_range(repo, branch="master", hours=10):
    """
    Get commits in the given branch within the last 'hours' range.
    """
    time_limit = datetime.now() - timedelta(hours=hours)
    commits = []
    for commit in repo.iter_commits(branch):
        commit_time = datetime.fromtimestamp(commit.committed_date)
        if commit_time >= time_limit:
            commits.append(commit)
        else:
            break
    return commits

def highlight_diff(old_line, new_line):
    """
    Highlight only the changed substring between old_line and new_line.
    Returns highlighted old and new lines.
    """
    if old_line == new_line:
        return old_line, new_line

    highlighted_old, highlighted_new = "", ""
    i = 0
    while i < len(old_line) and i < len(new_line):
        if old_line[i] != new_line[i]:
            # Highlight differing sections
            highlighted_old += f"<span style='background-color: #ffc7ce;'>{old_line[i]}</span>"
            highlighted_new += f"<span style='background-color: #c6efce;'>{new_line[i]}</span>"
        else:
            highlighted_old += old_line[i]
            highlighted_new += new_line[i]
        i += 1

    # Handle remaining characters
    while i < len(old_line):
        highlighted_old += f"<span style='background-color: #ffc7ce;'>{old_line[i]}</span>"
        i += 1
    while i < len(new_line):
        highlighted_new += f"<span style='background-color: #c6efce;'>{new_line[i]}</span>"
        i += 1

    return highlighted_old, highlighted_new

def generate_diff_table_rows(old_lines, new_lines, file_path, people):
    """
    Generate the HTML table row with before/after diff for a file.
    Each file's change is represented in one row with context and changes highlighted.
    """
    # Generate the unified diff with 2 lines of context
    diff = list(unified_diff(
        old_lines, new_lines,
        fromfile="OLD", tofile="NEW", 
        lineterm='',
        n=2  # Include 2 lines of context
    ))

    # Prepare the lines for before (old) and after (new)
    before_diff = []
    after_diff = []

    for line in diff:
        if line.startswith(' '):  # Context (unchanged)
            before_diff.append(line[2:])  # Remove leading space
            after_diff.append(line[2:])   # Remove leading space
        elif line.startswith('-'):  # Removed (from old)
            before_diff.append(f"<span style='background-color: #ffc7ce;'>{line[2:]}</span>")
            after_diff.append("")  # Empty for after
        elif line.startswith('+'):  # Added (new)
            before_diff.append("")  # Empty for before
            after_diff.append(f"<span style='background-color: #c6efce;'>{line[2:]}</span>")

    # Generate HTML for each modified line
    row_html = []
    for old_line, new_line in zip(before_diff, after_diff):
        # Generate responsible person dropdown
        dropdown_html = "<select>"
        for p in people:
            dropdown_html += f"<option value='{p}'>{p}</option>"
        dropdown_html += "</select>"

        row_html.append(
            f"<tr>"
            f"<td>{file_path}</td>"
            f"<td style='white-space: pre-wrap;'><pre>{old_line}</pre></td>"
            f"<td style='white-space: pre-wrap;'><pre>{new_line}</pre></td>"
            f"<td>{dropdown_html}</td>"
            f"</tr>"
        )

    return row_html

def main():
    # Hardcoded configurations
    repo_path = r"C:\work\github_repo\smarteda-terminal"
    branch_name = "feature/autosync-jdk17"
    hours_range = 10  # Recently 10 hours
    folder_prefix = "formatted-xml"  # Only files starting with "formatted-xml"

    # Initialize repo and get recent commits
    repo = get_repo(repo_path)
    commits = get_commits_in_time_range(repo, branch=branch_name, hours=hours_range)
    print(f"Found {len(commits)} commits in the last {hours_range} hour(s) on branch '{branch_name}'.")

    # Pre-defined list of responsible persons
    people = ["Alice", "Bob", "Charlie", "David"]

    # Basic HTML page structure
    html_output = """
<html>
<head>
<meta charset="utf-8"/>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }
    table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 30px;
    }
    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
        vertical-align: top;
    }
    th {
        background-color: #f2f2f2;
    }
    h1 {
        margin-bottom: 10px;
    }
</style>
</head>
<body>
"""
    html_output += f"<h1>Git Diffs - Last {hours_range} Hours (Branch: {branch_name})</h1>"
    html_output += "<table>"
    html_output += "<thead><tr><th>Modified File</th><th>Before</th><th>After</th><th>Responsible Person</th></tr></thead>"
    html_output += "<tbody>"

    # Processing commits and diffs
    for commit in commits:
        if not commit.parents:
            continue  # Skip if there's no parent (e.g. initial commit)

        parent = commit.parents[0]
        diffs = parent.diff(commit, create_patch=True)

        for diff in diffs:
            # Only process files starting with "formatted-xml"
            if diff.a_path and diff.b_path and (diff.a_path.startswith(folder_prefix) or diff.b_path.startswith(folder_prefix)):
                old_content = diff.a_blob.data_stream.read().decode('utf-8', errors='ignore').splitlines()
                new_content = diff.b_blob.data_stream.read().decode('utf-8', errors='ignore').splitlines()

                # Generate the HTML rows for this file's diff
                row_html = generate_diff_table_rows(old_content, new_content, diff.a_path, people)
                html_output += "".join(row_html)

    html_output += "</tbody></table>"
    html_output += "</body></html>"

    # Write the final HTML report to a file
    output_file = "diff_report.html"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_output)

    print(f"Diff report has been generated: '{output_file}'")

if __name__ == "__main__":
    main()
