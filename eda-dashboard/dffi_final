import os
from git import Repo
from datetime import datetime, timedelta
from difflib import unified_diff

def get_repo(repo_path="."):
    """
    Initialize and return the Repo object for the given path.
    """
    if not os.path.exists(repo_path):
        raise FileNotFoundError(f"Path does not exist: {repo_path}")
    repo = Repo(repo_path)
    if repo.bare:
        raise Exception(f"Repository '{repo_path}' is a bare repository, please provide a working directory path.")
    return repo

def get_commits_in_time_range(repo, branch="master", hours=1):
    """
    Get commits from the specified branch within the last 'hours' hours.
    """
    time_limit = datetime.now() - timedelta(hours=hours)
    commits = []
    for commit in repo.iter_commits(branch):
        commit_time = datetime.fromtimestamp(commit.committed_date)
        if commit_time >= time_limit:
            commits.append(commit)
        else:
            # Since commits are iterated in reverse order (from most recent),
            # we can break out of the loop when the commit time is older than the time limit.
            break
    return commits

def generate_html_diff(file_path, old_content, new_content, people):
    """
    Generate HTML table rows showing the diff between the old and new content of a file.
    Includes a dropdown for assigning responsible people for each file change.
    """
    diff_lines = list(unified_diff(
        old_content.splitlines(),
        new_content.splitlines(),
        lineterm='',
        fromfile="Before",
        tofile="After",
    ))

    # If no differences are found, return an empty string.
    if not diff_lines:
        return ""

    rows = []
    first_diff_line = True

    for line in diff_lines:
        # Skip diff metadata lines (e.g. --- +++ @@)
        if line.startswith('---') or line.startswith('+++') or line.startswith('@@'):
            continue

        # Generate the "person responsible" dropdown HTML
        dropdown_html = "<select>"
        for person in people:
            dropdown_html += f"<option value='{person}'>{person}</option>"
        dropdown_html += "</select>"

        # Escape special characters for HTML safety
        safe_line_content = (line[1:].replace('<', '&lt;').replace('>', '&gt;'))

        if line.startswith('-'):  # Line deleted in the old file
            if first_diff_line:
                row = (
                    f"<tr>"
                    f"<td rowspan='1'>{file_path}</td>"
                    f"<td style='background-color: #ffc7ce;'>{safe_line_content}</td>"
                    f"<td></td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
                first_diff_line = False
            else:
                row = (
                    f"<tr>"
                    f"<td style='background-color: #ffc7ce;'>{safe_line_content}</td>"
                    f"<td></td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
            rows.append(row)

        elif line.startswith('+'):  # Line added in the new file
            if first_diff_line:
                row = (
                    f"<tr>"
                    f"<td rowspan='1'>{file_path}</td>"
                    f"<td></td>"
                    f"<td style='background-color: #c6efce;'>{safe_line_content}</td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
                first_diff_line = False
            else:
                row = (
                    f"<tr>"
                    f"<td></td>"
                    f"<td style='background-color: #c6efce;'>{safe_line_content}</td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
            rows.append(row)

        else:  # Context line or unchanged line
            safe_line_content = line.lstrip(' ')
            safe_line_content = safe_line_content.replace('<', '&lt;').replace('>', '&gt;')
            if first_diff_line:
                row = (
                    f"<tr>"
                    f"<td rowspan='1'>{file_path}</td>"
                    f"<td colspan='2'>{safe_line_content}</td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
                first_diff_line = False
            else:
                row = (
                    f"<tr>"
                    f"<td colspan='2'>{safe_line_content}</td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
            rows.append(row)

    # Adjust the first row's 'rowspan' so that the file name is only shown once
    if rows:
        total_rows = len(rows)
        first_row = rows[0]
        if "rowspan='1'" in first_row:
            first_row = first_row.replace("rowspan='1'", f"rowspan='{total_rows}'")
        rows[0] = first_row

        # Remove repeated file path columns in subsequent rows
        for i in range(1, total_rows):
            rows[i] = rows[i].replace(f"<tr><td rowspan='1'>{file_path}</td>", "<tr>")

    return "\n".join(rows)

def main():
    repo_path = "."
    repo = get_repo(repo_path)

    # Example: change the branch name as needed
    branch_name = "master"
    # Get commits from the last 1 hour
    commits = get_commits_in_time_range(repo, branch=branch_name, hours=1)
    print(f"Found {len(commits)} commits in the last 1 hour on branch '{branch_name}'.")

    # Predefined list of people to assign as responsible for the changes
    people = ["Alice", "Bob", "Charlie", "David"]
    
    # Specify which files or directories to include (e.g., only look at changes in src/, docs/, and README.md)
    paths_to_include = ["src/", "docs/", "README.md"]

    # Specify which files or directories to exclude
    exclude_paths = ["tests/", "build/"]

    # Create the basic structure of the HTML page
    html_output = """
<html>
<head>
<meta charset="utf-8"/>
<style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1 { margin-bottom: 10px; }
    table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 30px;
    }
    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        vertical-align: top;
    }
    th {
        background-color: #f2f2f2;
    }
</style>
</head>
<body>
"""

    html_output += f"<h1>Git Diffs - Last 1 Hour (Branch: {branch_name})</h1>"
    html_output += "<table>"
    html_output += "<thead><tr><th>Modified File</th><th>Before Change</th><th>After Change</th><th>Responsible Person</th></tr></thead>"
    html_output += "<tbody>"

    for commit in commits:
        # Skip initial commits that have no parent
        if not commit.parents:
            continue

        parent = commit.parents[0]

        # Get the diff of this commit compared to its parent
        diffs = parent.diff(commit, create_patch=True)

        for diff in diffs:
            # Only include files that were added, deleted, or modified (with non-empty blobs)
            if diff.a_path and diff.b_path and diff.a_blob and diff.b_blob:
                # Filter files based on the 'paths_to_include' list and exclude from 'exclude_paths'
                if any(diff.a_path.startswith(p) for p in exclude_paths) or any(diff.b_path.startswith(p) for p in exclude_paths):
                    # Skip files that match the exclude list
                    continue

                if not any(diff.a_path.startswith(p) for p in paths_to_include) \
                   and not any(diff.b_path.startswith(p) for p in paths_to_include):
                    # Skip files not in the specified include paths
                    continue

                old_content = diff.a_blob.data_stream.read().decode('utf-8', errors='ignore')
                new_content = diff.b_blob.data_stream.read().decode('utf-8', errors='ignore')

                file_path = diff.a_path

                html_output += generate_html_diff(file_path, old_content, new_content, people)

    html_output += "</tbody></table></body></html>"

    output_file = "recent_git_diffs_with_dropdowns.html"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_output)

    print(f"Generated change report written to: '{output_file}'")

if __name__ == "__main__":
    main()

