import os
from git import Repo
from datetime import datetime, timedelta
from difflib import SequenceMatcher

def get_repo(repo_path="."):
    """
    Return a Repo object for the given path.
    Raise an exception if the path is not a valid Git repository.
    """
    if not os.path.exists(repo_path):
        raise FileNotFoundError(f"Path does not exist: {repo_path}")
    repo = Repo(repo_path)
    if repo.bare:
        raise Exception(f"The repository at '{repo_path}' is bare. Please provide a working directory.")
    return repo

def get_commits_in_time_range(repo, branch="master", hours=1):
    """
    Get commits in the given branch within the last 'hours' range.
    """
    time_limit = datetime.now() - timedelta(hours=hours)
    commits = []
    for commit in repo.iter_commits(branch):
        commit_time = datetime.fromtimestamp(commit.committed_date)
        if commit_time >= time_limit:
            commits.append(commit)
        else:
            break
    return commits

def highlight_substring_diff(old_line, new_line):
    """
    Highlight only the changed substring between old_line and new_line.
    Return (old_line_html, new_line_html) with inline <span> tags.
    """
    matcher = SequenceMatcher(None, old_line, new_line)
    old_line_html_parts = []
    new_line_html_parts = []

    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        # tag can be: 'equal', 'replace', 'delete', 'insert'
        old_segment = old_line[i1:i2]
        new_segment = new_line[j1:j2]

        if tag == 'equal':
            old_line_html_parts.append(old_segment)
            new_line_html_parts.append(new_segment)
        elif tag == 'replace':
            old_line_html_parts.append(f"<span style='background-color: #ffc7ce;'>{old_segment}</span>")
            new_line_html_parts.append(f"<span style='background-color: #c6efce;'>{new_segment}</span>")
        elif tag == 'delete':
            old_line_html_parts.append(f"<span style='background-color: #ffc7ce;'>{old_segment}</span>")
        elif tag == 'insert':
            new_line_html_parts.append(f"<span style='background-color: #c6efce;'>{new_segment}</span>")

    return "".join(old_line_html_parts), "".join(new_line_html_parts)

def generate_line_diff_table_rows(old_lines, new_lines, file_path, people):
    """
    Compare old_lines vs new_lines line by line with SequenceMatcher.
    Return HTML <tr> rows for changed lines only.
    Each changed line is one row, with columns:
        [Modified File] | [Before (highlighted)] | [After (highlighted)] | [Responsible Person]
    """
    matcher = SequenceMatcher(None, old_lines, new_lines)
    rows_html = []

    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        # Skip blocks that are 'equal' since there's no change
        if tag == 'equal':
            continue
        
        old_block = old_lines[i1:i2]
        new_block = new_lines[j1:j2]
        max_count = max(len(old_block), len(new_block))

        # Prepare the dropdown
        dropdown_html = "<select>"
        for p in people:
            dropdown_html += f"<option value='{p}'>{p}</option>"
        dropdown_html += "</select>"

        for idx in range(max_count):
            # old side line (could be empty if this was an insertion in new)
            old_line = old_block[idx] if idx < len(old_block) else ""
            # new side line (could be empty if this was a deletion from old)
            new_line = new_block[idx] if idx < len(new_block) else ""

            # If both sides are empty, skip
            if not old_line and not new_line:
                continue

            old_line_hl, new_line_hl = highlight_substring_diff(old_line, new_line)

            row_html = (
                f"<tr>"
                f"<td>{file_path}</td>"
                f"<td style='white-space: pre-wrap;'>{old_line_hl}</td>"
                f"<td style='white-space: pre-wrap;'>{new_line_hl}</td>"
                f"<td>{dropdown_html}</td>"
                f"</tr>"
            )
            rows_html.append(row_html)

    return "\n".join(rows_html)

def main():
    # Hardcode these as requested
    repo_path = r"C:\work\github_repo\smarteda-terminal"
    branch_name = "feature/autosync-jdk17"
    paths_to_include = ["formatted-xml"]

    hours_range = 1  # You can change this if needed

    repo = get_repo(repo_path)
    commits = get_commits_in_time_range(repo, branch=branch_name, hours=hours_range)
    print(f"Found {len(commits)} commits in the last {hours_range} hour(s) on branch '{branch_name}'.")

    # Pre-defined list of responsible persons
    people = ["Alice", "Bob", "Charlie", "David"]

    # Basic HTML page structure (similar to the first version's style)
    html_output = """
<html>
<head>
<meta charset="utf-8"/>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }
    table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 30px;
    }
    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
        vertical-align: top;
    }
    th {
        background-color: #f2f2f2;
    }
    h1 {
        margin-bottom: 10px;
    }
</style>
</head>
<body>
"""
    html_output += f"<h1>Git Diffs - Last {hours_range} Hour(s) (Branch: {branch_name})</h1>"
    html_output += "<table>"
    html_output += "<thead><tr><th>Modified File</th><th>Before</th><th>After</th><th>Responsible Person</th></tr></thead>"
    html_output += "<tbody>"

    for commit in commits:
        if not commit.parents:
            # Skip if there's no parent
            continue

        parent = commit.parents[0]
        diffs = parent.diff(commit, create_patch=True)

        for diff in diffs:
            # We only care about textual modifications where we can read a_blob/b_blob
            if diff.a_path and diff.b_path and diff.a_blob and diff.b_blob:
                # Filter by our interest in "formatted-xml"
                # If neither a_path nor b_path contains "formatted-xml", skip
                if ("formatted-xml" not in diff.a_path) and ("formatted-xml" not in diff.b_path):
                    continue

                old_lines = diff.a_blob.data_stream.read().decode('utf-8', errors='ignore').splitlines()
                new_lines = diff.b_blob.data_stream.read().decode('utf-8', errors='ignore').splitlines()

                # Choose how to label the file in the table
                file_label = diff.a_path

                # Generate single-line differences with highlight
                row_html = generate_line_diff_table_rows(old_lines, new_lines, file_label, people)
                html_output += row_html

    html_output += "</tbody></table>"
    html_output += "</body></html>"

    output_file = "diff_report.html"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_output)

    print(f"Diff report has been generated: '{output_file}'")

if __name__ == "__main__":
    main()


import os
from git import Repo
from datetime import datetime, timedelta
from difflib import SequenceMatcher

def get_repo(repo_path="."):
    """
    Return a Repo object for the given path. Raises an exception if the path is not a valid Git repository.
    """
    if not os.path.exists(repo_path):
        raise FileNotFoundError(f"Path does not exist: {repo_path}")
    repo = Repo(repo_path)
    if repo.bare:
        raise Exception(f"The repository at '{repo_path}' is bare. Please provide a working directory.")
    return repo

def get_commits_in_time_range(repo, branch="master", hours=1):
    """
    Get commits in the given branch within the last 'hours' range.
    """
    time_limit = datetime.now() - timedelta(hours=hours)
    commits = []
    for commit in repo.iter_commits(branch):
        commit_time = datetime.fromtimestamp(commit.committed_date)
        if commit_time >= time_limit:
            commits.append(commit)
        else:
            break
    return commits

def highlight_substring_diff(old_line, new_line):
    """
    Highlight only the changed substring between old_line and new_line.
    This function returns (old_line_html, new_line_html).
    """
    matcher = SequenceMatcher(None, old_line, new_line)
    old_line_html = []
    new_line_html = []

    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        # 'tag' can be: 'replace', 'delete', 'insert', 'equal'
        old_segment = old_line[i1:i2]
        new_segment = new_line[j1:j2]

        if tag == 'equal':
            # No change
            old_line_html.append(old_segment)
            new_line_html.append(new_segment)
        elif tag == 'replace':
            # Highlight replaced segments in both old and new
            old_line_html.append(f"<span style='background-color: #ffc7ce;'>{old_segment}</span>")
            new_line_html.append(f"<span style='background-color: #c6efce;'>{new_segment}</span>")
        elif tag == 'delete':
            # Present in old but removed in new
            old_line_html.append(f"<span style='background-color: #ffc7ce;'>{old_segment}</span>")
        elif tag == 'insert':
            # Newly inserted in new
            new_line_html.append(f"<span style='background-color: #c6efce;'>{new_segment}</span>")

    return ("".join(old_line_html), "".join(new_line_html))

def generate_line_diff_table_rows(old_lines, new_lines, file_path, people):
    """
    Compare old_lines vs new_lines line by line.
    Return HTML <tr> rows where lines differ, with a single row per difference:
        <FileName> | <OldLine> | <NewLine> | <Responsible Person Dropdown>
    Only changed lines (including insertions/deletions) are shown.
    """
    # Use SequenceMatcher to align similar lines and find which lines changed
    matcher = SequenceMatcher(None, old_lines, new_lines)
    rows_html = []
    # We'll collect all changed blocks from get_opcodes()
    for tag, i1, i2, j1, j2 in matcher.get_opcodes():
        # If lines are the same (tag == 'equal'), skip
        # If lines changed, produce rows
        if tag == 'equal':
            continue

        # The responsible person dropdown
        dropdown_html = "<select>"
        for p in people:
            dropdown_html += f"<option value='{p}'>{p}</option>"
        dropdown_html += "</select>"

        # For each changed line, we show a single row. 
        # old_lines[i1:i2] are the lines from old file that changed.
        # new_lines[j1:j2] are the lines from new file that replaced them.
        
        # We'll match them in parallel. If old side has fewer lines, the rest are new lines. If new side has fewer lines, the rest are deleted lines, etc.
        max_count = max(i2 - i1, j2 - j1)
        for idx in range(max_count):
            # if there's no corresponding old line, means it was inserted
            old_line = old_lines[i1 + idx] if (i1 + idx < i2) else ""
            # if there's no corresponding new line, means it was deleted
            new_line = new_lines[j1 + idx] if (j1 + idx < j2) else ""

            # highlight the substring difference
            old_line_hl, new_line_hl = highlight_substring_diff(old_line, new_line)

            row = (
                f"<tr>"
                f"<td>{file_path}</td>"
                f"<td style='white-space: pre;'>{old_line_hl}</td>"
                f"<td style='white-space: pre;'>{new_line_hl}</td>"
                f"<td>{dropdown_html}</td>"
                f"</tr>"
            )
            rows_html.append(row)

    return "\n".join(rows_html)

def main():
    repo_path = "."
    branch_name = "master"
    hours_range = 1

    repo = get_repo(repo_path)
    commits = get_commits_in_time_range(repo, branch=branch_name, hours=hours_range)
    print(f"Found {len(commits)} commits in the last {hours_range} hour(s) on branch '{branch_name}'.")

    # Pre-defined responsible persons
    people = ["Alice", "Bob", "Charlie", "David"]

    # If you want to only watch certain paths, specify them here
    paths_to_include = ["src/", "docs/", "README.md"]

    html_output = """
<html>
<head>
<meta charset="utf-8" />
<style>
    /* Make the page narrower and centered */
    body {
        font-family: Arial, sans-serif;
        max-width: 1200px;  /* you can adjust this width to your preference */
        margin: 0 auto;
        padding: 20px;
    }
    table {
        border-collapse: collapse;
        width: 100%;
        table-layout: fixed; /* So columns don't expand too wide */
        word-wrap: break-word; /* Break long lines if needed */
        margin-bottom: 30px;
    }
    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        vertical-align: top;
    }
    th {
        background-color: #f2f2f2;
    }
    h1 {
        margin-bottom: 10px;
    }
</style>
</head>
<body>
"""
    html_output += f"<h1>Git Diffs - Last {hours_range} Hour(s) (Branch: {branch_name})</h1>"
    html_output += "<table>"
    html_output += "<thead><tr><th>Modified File</th><th>Before</th><th>After</th><th>Responsible Person</th></tr></thead>"
    html_output += "<tbody>"

    for commit in commits:
        if not commit.parents:
            # Skip initial commit or commits with no parents
            continue

        parent = commit.parents[0]
        diffs = parent.diff(commit, create_patch=True)

        for diff in diffs:
            # We only care about modifications with valid a_blob and b_blob
            if diff.a_path and diff.b_path and diff.a_blob and diff.b_blob:
                # Filter by paths
                if not any(diff.a_path.startswith(p) for p in paths_to_include) \
                   and not any(diff.b_path.startswith(p) for p in paths_to_include):
                    continue

                old_content = diff.a_blob.data_stream.read().decode('utf-8', errors='ignore').splitlines()
                new_content = diff.b_blob.data_stream.read().decode('utf-8', errors='ignore').splitlines()

                # Choose a file path label (could be b_path if you prefer)
                file_label = diff.a_path

                # Generate table rows for changed lines only
                row_html = generate_line_diff_table_rows(old_content, new_content, file_label, people)
                html_output += row_html

    html_output += "</tbody></table></body></html>"

    output_file = "single_line_diff.html"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_output)

    print(f"Diff report has been generated: '{output_file}'")

if __name__ == "__main__":
    main()



import os
from git import Repo
from datetime import datetime, timedelta
from difflib import unified_diff

def get_repo(repo_path="."):
    """
    初始化并返回给定路径下的 Repo 对象。
    """
    if not os.path.exists(repo_path):
        raise FileNotFoundError(f"路径不存在: {repo_path}")
    repo = Repo(repo_path)
    if repo.bare:
        raise Exception(f"仓库 '{repo_path}' 是一个裸仓库，请提供工作区路径。")
    return repo

def get_commits_in_time_range(repo, branch="master", hours=1):
    """
    获取指定 branch 在最近 hours 小时内的提交记录。
    """
    time_limit = datetime.now() - timedelta(hours=hours)
    commits = []
    for commit in repo.iter_commits(branch):
        commit_time = datetime.fromtimestamp(commit.committed_date)
        if commit_time >= time_limit:
            commits.append(commit)
        else:
            # 因为提交是按时间逆序迭代，如果当前提交时间已早于 time_limit，
            # 后面的提交时间也会更早，可以直接跳出循环。
            break
    return commits

def generate_html_diff(file_path, old_content, new_content, people):
    """
    基于给定的旧内容和新内容，生成带高亮的 HTML diff 表格行。
    每个文件返回对应的一组 <tr> 行，并且在第一行的第一列显示文件名，其余行留空。
    最后一列是负责人的下拉选择框。
    """
    diff_lines = list(unified_diff(
        old_content.splitlines(),
        new_content.splitlines(),
        lineterm='',
        fromfile="Before",
        tofile="After",
    ))

    # 如果 diff_lines 为空，说明没有实际变更
    if not diff_lines:
        return ""

    rows = []
    first_diff_line = True

    for line in diff_lines:
        # 跳过 diff 的元信息行（例如 --- +++ @@）
        if line.startswith('---') or line.startswith('+++') or line.startswith('@@'):
            continue

        # 生成“责任人”下拉框的 HTML
        dropdown_html = "<select>"
        for person in people:
            dropdown_html += f"<option value='{person}'>{person}</option>"
        dropdown_html += "</select>"

        # 为了防止 HTML 被破坏，转义特殊字符
        safe_line_content = (line[1:].replace('<', '&lt;')
                                     .replace('>', '&gt;'))

        # 分别处理删除(-)、新增(+) 和上下文(空格或其它)
        if line.startswith('-'):  # 旧文件中被删除的行
            if first_diff_line:
                row = (
                    f"<tr>"
                    f"<td rowspan='1'>{file_path}</td>"
                    f"<td style='background-color: #ffc7ce;'>{safe_line_content}</td>"
                    f"<td></td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
                first_diff_line = False
            else:
                row = (
                    f"<tr>"
                    f"<td style='background-color: #ffc7ce;'>{safe_line_content}</td>"
                    f"<td></td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
            rows.append(row)

        elif line.startswith('+'):  # 新文件中新增的行
            if first_diff_line:
                row = (
                    f"<tr>"
                    f"<td rowspan='1'>{file_path}</td>"
                    f"<td></td>"
                    f"<td style='background-color: #c6efce;'>{safe_line_content}</td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
                first_diff_line = False
            else:
                row = (
                    f"<tr>"
                    f"<td></td>"
                    f"<td style='background-color: #c6efce;'>{safe_line_content}</td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
            rows.append(row)

        else:
            # 一般是空格开头的上下文行，也可能是完全空行
            # 如果行以空格开头，去掉第一个字符（diff 默认会在上下文行前面加空格）
            safe_line_content = line.lstrip(' ')
            safe_line_content = safe_line_content.replace('<', '&lt;').replace('>', '&gt;')
            if first_diff_line:
                row = (
                    f"<tr>"
                    f"<td rowspan='1'>{file_path}</td>"
                    f"<td colspan='2'>{safe_line_content}</td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
                first_diff_line = False
            else:
                row = (
                    f"<tr>"
                    f"<td colspan='2'>{safe_line_content}</td>"
                    f"<td>{dropdown_html}</td>"
                    f"</tr>"
                )
            rows.append(row)

    # 实现对第一列（文件名）的 rowspan，使文件名只在第一行显示
    if rows:
        total_rows = len(rows)
        # 调整第一行的 rowspan
        first_row = rows[0]
        if "rowspan='1'" in first_row:
            first_row = first_row.replace("rowspan='1'", f"rowspan='{total_rows}'")
        if "rowspan=\"1\"" in first_row:
            first_row = first_row.replace('rowspan="1"', f'rowspan="{total_rows}"')
        rows[0] = first_row

        # 后续行去掉重复的 <td rowspan='1'>{file_path}</td>，如果有的话
        for i in range(1, total_rows):
            rows[i] = rows[i].replace(f"<tr><td rowspan='1'>{file_path}</td>", "<tr>")
            rows[i] = rows[i].replace(f"<tr><td rowspan=\"1\">{file_path}</td>", "<tr>")

    return "\n".join(rows)

def main():
    repo_path = "."
    repo = get_repo(repo_path)

    # 仅示例，可根据需求改为其它分支名
    branch_name = "master"
    # 获取最近 1 小时内的提交
    commits = get_commits_in_time_range(repo, branch=branch_name, hours=1)
    print(f"在分支 '{branch_name}' 最近 1 小时内找到 {len(commits)} 条提交。")

    # 预定义责任人下拉框列表
    people = ["Alice", "Bob", "Charlie", "David"]
    
    # 只关注的文件或文件夹（示例：只看 src/ 目录、docs/ 目录及 README.md 的变化）
    paths_to_include = ["src/", "docs/", "README.md"]

    # 创建 HTML 页面基本框架
    html_output = """
<html>
<head>
<meta charset="utf-8"/>
<style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1 { margin-bottom: 10px; }
    table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 30px;
    }
    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        vertical-align: top;
    }
    th {
        background-color: #f2f2f2;
    }
    /* 下面可以根据喜好进一步美化，比如让删除/新增的行背景颜色更柔和 */
</style>
</head>
<body>
"""

    html_output += f"<h1>Git Diffs - 最近 1 小时 (分支: {branch_name})</h1>"
    html_output += "<table>"
    html_output += "<thead><tr><th>修改文件</th><th>变更前</th><th>变更后</th><th>责任人</th></tr></thead>"
    html_output += "<tbody>"

    for commit in commits:
        # 跳过没有父提交的场景（例如初始提交）
        if not commit.parents:
            continue

        parent = commit.parents[0]

        # 获取该 commit 相对于其父提交的 diff
        diffs = parent.diff(commit, create_patch=True)

        for diff in diffs:
            # 如果 diff 对象表示文件的新增/删除/修改，需要确保 a_blob/b_blob 不为空
            # 一般只有被修改的文件才能读取到前后内容
            if diff.a_path and diff.b_path and diff.a_blob and diff.b_blob:
                # 如果你只想看某些文件或文件夹，可做如下过滤
                # 只要旧路径或者新路径满足在 `paths_to_include` 之列，就展示
                if not any(diff.a_path.startswith(p) for p in paths_to_include) \
                   and not any(diff.b_path.startswith(p) for p in paths_to_include):
                    # 如果都不符合，就跳过
                    continue

                old_content = diff.a_blob.data_stream.read().decode('utf-8', errors='ignore')
                new_content = diff.b_blob.data_stream.read().decode('utf-8', errors='ignore')

                # 这里的 file_path 可以选择显示 diff.a_path 还是 diff.b_path
                # 如果文件改名，也可以加逻辑拼接一下
                file_path = diff.a_path

                html_output += generate_html_diff(file_path, old_content, new_content, people)

    html_output += "</tbody></table></body></html>"

    output_file = "recent_git_diffs_with_dropdowns.html"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_output)

    print(f"生成的变更报告已写入: '{output_file}'")

if __name__ == "__main__":
    main()



-----------


import os
from git import Repo
from datetime import datetime, timedelta
from difflib import unified_diff

def get_repo(repo_path="."):
    """
    Initialize and return a Repo object for the given path.
    If no path is provided, defaults to the current directory.
    """
    if not os.path.exists(repo_path):
        raise FileNotFoundError(f"Path does not exist: {repo_path}")
    repo = Repo(repo_path)
    if repo.bare:
        raise Exception(f"Repository at '{repo_path}' is bare. Please provide a working directory.")
    return repo

def get_commits_in_time_range(repo, branch="master", hours=1):
    """
    Return commits from the given branch within the last 'hours'.
    """
    time_limit = datetime.now() - timedelta(hours=hours)
    commits = []
    for commit in repo.iter_commits(branch):
        commit_time = datetime.fromtimestamp(commit.committed_date)
        if commit_time >= time_limit:
            commits.append(commit)
        else:
            break
    return commits

def generate_html_diff(file_path, old_content, new_content, people):
    """
    Generate an HTML table showing diffs of old and new content grouped by file.
    Includes an additional dropdown column for "Responsible Person".
    """
    diff = unified_diff(
        old_content.splitlines(),
        new_content.splitlines(),
        lineterm='',
        fromfile="Before",
        tofile="After",
    )

    html = f"<tr><td rowspan='100%'>{file_path}</td>"
    first_line = True
    for line in diff:
        dropdown = "<select>"
        for person in people:
            dropdown += f"<option value='{person}'>{person}</option>"
        dropdown += "</select>"

        if line.startswith(' '):
            html += f"<td>{line[1:]}</td><td>{line[1:]}</td><td>{dropdown}</td></tr>"
        elif line.startswith('-'):
            html += f"<tr><td style='background-color: #ffc7ce;'>{line[1:]}</td><td></td><td>{dropdown}</td></tr>"
        elif line.startswith('+'):
            html += f"<tr><td></td><td style='background-color: #c6efce;'>{line[1:]}</td><td>{dropdown}</td></tr>"

        if first_line:
            first_line = False
        else:
            html = html.replace(f"<tr><td rowspan='100%'>{file_path}</td>", "")

    return html

def main():
    repo_path = "."
    repo = get_repo(repo_path)

    branch_name = "master"
    commits = get_commits_in_time_range(repo, branch=branch_name, hours=1)
    print(f"Found {len(commits)} commits in the last 1 hour on branch '{branch_name}'.")

    # Pre-defined list of people for dropdown
    people = ["Alice", "Bob", "Charlie", "David"]

    html_output = "<html><head><style>body { font-family: Arial, sans-serif; } table { border-collapse: collapse; width: 100%; } td, th { border: 1px solid black; padding: 8px; text-align: left; }</style></head><body>"
    html_output += f"<h1>Git Diffs - Last 1 Hour (Branch: {branch_name})</h1>"
    html_output += "<table><thead><tr><th>Modified File</th><th>Before</th><th>After</th><th>Responsible Person</th></tr></thead><tbody>"

    for commit in commits:
        if not commit.parents:
            continue

        parent = commit.parents[0]
        diffs = parent.diff(commit, create_patch=True)

        for diff in diffs:
            if diff.a_path and diff.b_path and diff.a_blob and diff.b_blob:
                old_content = diff.a_blob.data_stream.read().decode('utf-8', errors='ignore')
                new_content = diff.b_blob.data_stream.read().decode('utf-8', errors='ignore')
                html_output += generate_html_diff(diff.a_path, old_content, new_content, people)

    html_output += "</tbody></table></body></html>"

    output_file = "recent_git_diffs_with_dropdowns.html"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_output)

    print(f"Recent diffs have been written to '{output_file}'.")

if __name__ == "__main__":
    main()
